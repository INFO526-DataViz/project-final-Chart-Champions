[
  {
    "objectID": "proposal.html",
    "href": "proposal.html",
    "title": "üå† Constellation Maps",
    "section": "",
    "text": "Develop a Shiny app that generates constellation maps that utilizes interactive elements, incorporating computational and visualization techniques."
  },
  {
    "objectID": "proposal.html#high-level-goal",
    "href": "proposal.html#high-level-goal",
    "title": "üå† Constellation Maps",
    "section": "",
    "text": "Develop a Shiny app that generates constellation maps that utilizes interactive elements, incorporating computational and visualization techniques."
  },
  {
    "objectID": "proposal.html#goal-motivation",
    "href": "proposal.html#goal-motivation",
    "title": "üå† Constellation Maps",
    "section": "Goal & Motivation",
    "text": "Goal & Motivation\nThe primary objective of this project is to develop a Shiny app that not only generates interactive constellation maps but also prioritizes accessibility and personalization of these maps. By offering users the ability to input specific geographic locations, the app will provide personalized, contextually relevant constellation maps for each user. Individuals will be able to explore the night sky from different geographical locations by inputting latitude and longitudinal points to create visually provoking constellation maps. We hope to make stargazing more engaging and educational by personalizing the experience through various elements: color usage, map location, time zone, latitude/longitude location. Additionally, the app will be designed with a user-friendly interface to ensure accessibility with an aim to make it inclusive for people of all backgrounds and levels of astronomical knowledge. This will be achieved by using colorblind accessible palettes (avoiding bright and low-contrast colors) and providing annotations to provide readability and context for a wide range of users, including astronomy beginners."
  },
  {
    "objectID": "proposal.html#dataset",
    "href": "proposal.html#dataset",
    "title": "üå† Constellation Maps",
    "section": "Dataset",
    "text": "Dataset\nThe datasets are available in GeoJSON (*.geojson) and GeoPackage (*.gpkg) formats, representing celestial objects‚Äô positions as of the J2000 epoch. You can check out the dataset in here. They are roughly categorized into five sections: Asterisms, Constellations, DSOs (Deep-Sky Objects), Stars, and the Milky Way. Each of these astronomical object categories is further subdivided into s\nWe will be using three of the available data: the milkyway, the constellation lines, and the stars.\n\nMilky Way\n\n\n\n\n\n\n\n\nColumn Name\nData Type\nDescription\n\n\n\n\nID\nString\nMilky Way outlines in 5 brightness steps (ol1-ol5).\n\n\nGeometry\nLine Object\ngeometry lines for milky way\n\n\n\n\nmw  |&gt; formattable()\n\n\n\n\n\n\nid\n\n\ngeometry\n\n\n\n\n\n\nol1\n\n\nMULTIPOLYGON (((178.558 -74‚Ä¶\n\n\n\n\nol2\n\n\nMULTIPOLYGON (((-176.662 -6‚Ä¶\n\n\n\n\nol3\n\n\nMULTIPOLYGON (((-174.067 -6‚Ä¶\n\n\n\n\nol4\n\n\nMULTIPOLYGON (((-158.721 -6‚Ä¶\n\n\n\n\nol5\n\n\nMULTIPOLYGON (((161.333 -59‚Ä¶\n\n\n\n\n\n\n\n\n\nStars\n\n\n\n\n\n\n\n\nColumn Name\nData Type\nDescription\n\n\n\n\nID\nInteger\nShort designator\n\n\nMag\nDouble\nApparent magnitude, 999 if n.a.\n\n\nBV\nFloat\nb-v color index.\n\n\nBR\nFloat\nRelative brightness to magnitude 0, computed as \\(100^{-1 * mag / 5}\\)\n\n\nName\nString\nProper star name\n\n\nGeometry\nPoint Object\naround 40k stars point objects\n\n\n\n\n\n\n\n\n\n\nid\n\n\nmag\n\n\nbv\n\n\nbr\n\n\nname\n\n\ngeometry\n\n\n\n\n\n\n677\n\n\n2.07\n\n\n-0.038\n\n\n0.1486\n\n\nAlpheratz\n\n\nPOINT (2.0969 29.0904)\n\n\n\n\n746\n\n\n2.28\n\n\n0.380\n\n\n0.1225\n\n\nCaph\n\n\nPOINT (2.2945 59.1498)\n\n\n\n\n1067\n\n\n2.83\n\n\n-0.190\n\n\n0.0738\n\n\nAlgenib\n\n\nPOINT (3.309 15.1836)\n\n\n\n\n1415\n\n\n6.11\n\n\n-0.151\n\n\n0.0036\n\n\nPearce‚Äôs Star\n\n\nPOINT (4.4294 51.4331)\n\n\n\n\n1562\n\n\n3.56\n\n\n1.214\n\n\n0.0377\n\n\nDeneb Kaitos Shemali\n\n\nPOINT (4.857 -8.8239)\n\n\n\n\n2081\n\n\n2.40\n\n\n1.083\n\n\n0.1096\n\n\nAnkaa\n\n\nPOINT (6.571 -42.306)\n\n\n\n\n2920\n\n\n3.69\n\n\n-0.196\n\n\n0.0334\n\n\nFulu\n\n\nPOINT (9.2429 53.8969)\n\n\n\n\n3179\n\n\n2.24\n\n\n1.170\n\n\n0.1271\n\n\nShedar\n\n\nPOINT (10.1268 56.5373)\n\n\n\n\n3419\n\n\n2.04\n\n\n1.019\n\n\n0.1528\n\n\nDiphda\n\n\nPOINT (10.8974 -17.9866)\n\n\n\n\n3455\n\n\n4.77\n\n\n0.998\n\n\n0.0124\n\n\nAlnitham\n\n\nPOINT (11.0475 -10.6096)\n\n\n\n\n\n\n\n\n\nConstellation lines\n\n\n\n\n\n\n\n\nColumn Name\nData Type\nDescription\n\n\n\n\nGeometry\nLine Object\n89 constellation line objects\n\n\nID\nString\n3-letter designator\n\n\nRank\nInteger\n1-3 for differential name display by size/brightness\n\n\nName\nString\nfull IAU name\n\n\n\n\n\n\n\n\n\n\nid\n\n\nrank\n\n\nname\n\n\ngeometry\n\n\n\n\n\n\nAnd\n\n\n1\n\n\nAndromeda\n\n\nMULTILINESTRING ((14.3017 2‚Ä¶\n\n\n\n\nAnt\n\n\n3\n\n\nAntlia\n\n\nMULTILINESTRING ((142.3113 ‚Ä¶\n\n\n\n\nAps\n\n\n3\n\n\nApus\n\n\nMULTILINESTRING ((-138.0345‚Ä¶\n\n\n\n\nAqr\n\n\n2\n\n\nAquarius\n\n\nMULTILINESTRING ((-48.081 -‚Ä¶\n\n\n\n\nAql\n\n\n1\n\n\nAquila\n\n\nMULTILINESTRING ((-63.4351 ‚Ä¶\n\n\n\n\nAra\n\n\n3\n\n\nAra\n\n\nMULTILINESTRING ((-98.6514 ‚Ä¶\n\n\n\n\nAri\n\n\n1\n\n\nAries\n\n\nMULTILINESTRING ((42.496 27‚Ä¶\n\n\n\n\nAur\n\n\n1\n\n\nAuriga\n\n\nMULTILINESTRING ((89.8822 4‚Ä¶\n\n\n\n\nBoo\n\n\n1\n\n\nBo√∂tes\n\n\nMULTILINESTRING ((-153.1844‚Ä¶\n\n\n\n\nCae\n\n\n3\n\n\nCaelum\n\n\nMULTILINESTRING ((67.7087 -‚Ä¶\n\n\n\n\n\n\n\nThese datasets originally feature interactive and adaptable constellation maps, initially curated by Olaf Frohn. However, some issues related to date lines and certain packages were identified in these datasets, and they were subsequently resolved by Dieghernan. You can explore the repository here.\n\n\nWhy did we choose this dataset?\nAs we explored various topics for a captivating visualization project using a Shiny app, we stumbled upon a fascinating reference that showcased creating city maps, which you can find here. Inspired by this, our interest evolved towards the idea of crafting a celestial map that would represent the skies above our location.\nThese datasets offer celestial visualizations based on longitude, latitude, and time parameters, granting us the ability to fashion dynamic and interactive sky maps."
  },
  {
    "objectID": "proposal.html#weekly-plan-of-attack",
    "href": "proposal.html#weekly-plan-of-attack",
    "title": "üå† Constellation Maps",
    "section": "Weekly ‚Äúplan of attack‚Äù",
    "text": "Weekly ‚Äúplan of attack‚Äù\n\n\n\n\n\n\n\n\nWeek\nAssigned Team members\nWeekly Tasks\n\n\n\n\nWeek 1-2: Understanding the Basics\nMegan Hokama, Tejashwini Kasa\n\nUnderstand the basics of spatial manipulation with libraries like sf and s2.\nGet familiarized with visualization using ggfx, and ggshadow.\nTest out apps with Shiny and its usage for rendering real-time maps.\n\n\n\nWeek 3: Creating the basis for celestial maps\nKiwoon Hong, Visalakshi Iyer\n\nCreate base functions for themes, loading datasets, parsing, and cleaning.\nSince the maps need to be custom, we will also make functions that will work on variability. Some of the variables for the map will be background color, location input, glow intensity, names of the stars on the celestial map, and custom text on the map‚Äôs footer.\n\n\n\nWeek 4: Creating the Star Map\nSai Madhuri Kandula, Tejashwini Kasa\n\nCreate basic maps using sf object and sperical geoms using s2.\nAdd scatterplot of the constellations on top of the prepared spherical geom.\nExperiment with different locations, and test custom inputs in the plotting functions.\n\n\n\nWeek 5-6: Shiny App Development\nMegan Hokama, Visalakshi Iyer\n\nIntegrate star map code into a shiny app .\nWork on the GUI elements to provide dynamic rendering.\nCreate workflow that provides size, theme, and customization of maps.\nCreate download functionality for the maps.\nTest different parameters to identify edge cases.\n\n\n\nWeek 7: Testing and reviewing\nKiwoon Hong, Sai Madhuri Kandula\n\nRefine the app based on feedback.\nDeploy the app.\nPrepare presentation for the final showcase."
  },
  {
    "objectID": "proposal.html#repo-organization",
    "href": "proposal.html#repo-organization",
    "title": "üå† Constellation Maps",
    "section": "Repo Organization",
    "text": "Repo Organization\n\n.github: This directory contain files related to GitHub, such as workflows, issue templates, or other configurations.\n_extra: Contains code, notes and other files used during experimentation. Contents of this folder is not a part of the final output.\n_freeze: The folder created to store files generated during project render.\ndata/: This folder contains data files or datasets that are used in the project.\n\nREADME.md : A readme file that describes the datasets in more detail.\n\nimages: This folder contains image files that are used in the project, such as illustrations, diagrams, or other visual assets.\n.gitignore: This file specifies which files or directories should be ignored by version control.\nREADME.md: This file usually contains documentation or information about the project. It‚Äôs often the first thing someone reads when they visit the project repository.\n_quarto.yml: This is a configuration file.\nabout.qmd : This quarto document contains the information about team members.\nindex.qmd : This quarto document contains the approach and analysis and results of the project.\npresentation.qmd : It contains the slides for the presentation.\nproposal.qmd : This quarto documents has the proposal of the project.\nproject-final.Rproj : This is an RStudio project file, which helps organize R-related files and settings for the project."
  },
  {
    "objectID": "proposal.html#analysis-plan",
    "href": "proposal.html#analysis-plan",
    "title": "üå† Constellation Maps",
    "section": "Analysis Plan",
    "text": "Analysis Plan\n\nDevelop a Shiny app for personalized constellation maps with user input.\nEnhance user engagement in stargazing from various locations time zones and even user bases.\nPrioritize accessibility through a user-friendly interface and colorblind-friendly design.\nProvide contextual annotations for users with different levels of astronomical knowledge."
  },
  {
    "objectID": "analysis/functions_celestial_objects.html",
    "href": "analysis/functions_celestial_objects.html",
    "title": "Helper Functions for Plotting",
    "section": "",
    "text": "if(!require(pacman))\n  install.packages(\"pacman\")\n\nLoading required package: pacman\n\npacman::p_load(knitr, formattable, tidyverse, # General packages\n               lubridate, lutz, # range data and dates  \n               sf, s2, nominatimlite, # Spatial manipulation\n               ggfx,ggshadow # Visualization\n               )"
  },
  {
    "objectID": "analysis/functions_celestial_objects.html#load-packages",
    "href": "analysis/functions_celestial_objects.html#load-packages",
    "title": "Helper Functions for Plotting",
    "section": "",
    "text": "if(!require(pacman))\n  install.packages(\"pacman\")\n\nLoading required package: pacman\n\npacman::p_load(knitr, formattable, tidyverse, # General packages\n               lubridate, lutz, # range data and dates  \n               sf, s2, nominatimlite, # Spatial manipulation\n               ggfx,ggshadow # Visualization\n               )"
  },
  {
    "objectID": "analysis/functions_celestial_objects.html#load-data-set-labeler",
    "href": "analysis/functions_celestial_objects.html#load-data-set-labeler",
    "title": "Helper Functions for Plotting",
    "section": "Load data, Set labeler",
    "text": "Load data, Set labeler\n\n###Load data from specific repo\nload_celestial &lt;- function(filename,\n                           url = \"https://cdn.jsdelivr.net/gh/dieghernan/celestial_data@main/data/\",\n                           cachedir = tempdir()) {\n  if (!dir.exists(cachedir)) {\n    stop(\n      \"Please create \",\n      path.expand(cachedir),\n      \" directory\",\n      \"first\"\n    )\n  }\n\n  url &lt;- file.path(url, filename)\n  local_path &lt;- file.path(cachedir, filename)\n\n\n  if (!file.exists(local_path)) {\n    download.file(url, local_path, mode = \"wb\", quiet = TRUE)\n  }\n\n  celestial &lt;- sf::st_read(local_path, quiet = TRUE)\n\n  return(celestial)\n}\n\n\n#labeller that returns a decimal longitude or latitude coordinate\npretty_lonlat &lt;- function(x, type, accuracy = 2) {\n  positive &lt;- x &gt;= 0\n\n  # Decompose\n  x &lt;- abs(x)\n  D &lt;- as.integer(x)\n  m &lt;- (x - D) * 60\n  M &lt;- as.integer(m)\n  S &lt;- round((m - M) * 60, accuracy)\n\n  # Get label\n  if (type == \"lon\") {\n    lab &lt;- ifelse(positive &gt; 0, \"E\", \"W\")\n  } else {\n    lab &lt;- ifelse(positive &gt; 0, \"N\", \"S\")\n  }\n\n\n  # Compose\n  label &lt;- paste0(D, \"\\u00b0 \", M, \"' \", S, '\\\" ', lab)\n  return(label)\n}"
  },
  {
    "objectID": "analysis/functions_celestial_objects.html#set-degrees-adjust-time",
    "href": "analysis/functions_celestial_objects.html#set-degrees-adjust-time",
    "title": "Helper Functions for Plotting",
    "section": "Set degrees, Adjust time",
    "text": "Set degrees, Adjust time\n\n# Derive rotation degrees of the projection given a date and a longitude\nget_mst &lt;- function(dt, lng) {\n  desired_date_utc &lt;- lubridate::with_tz(dt, \"UTC\")\n\n\n  yr &lt;- lubridate::year(desired_date_utc)\n  mo &lt;- lubridate::month(desired_date_utc)\n  dy &lt;- lubridate::day(desired_date_utc)\n  h &lt;- lubridate::hour(desired_date_utc)\n  m &lt;- lubridate::minute(desired_date_utc)\n  s &lt;- lubridate::second(desired_date_utc)\n\n  if ((mo == 1) || (mo == 2)) {\n    yr &lt;- yr - 1\n    mo &lt;- mo + 12\n  }\n\n  # Adjust times before Gregorian Calendar\n  # See https://squarewidget.com/julian-day/\n  if (lubridate::as_date(dt) &gt; as.Date(\"1582-10-14\")) {\n    a &lt;- floor(yr / 100)\n    b &lt;- 2 - a + floor(a / 4)\n  } else {\n    b &lt;- 0\n  }\n  c &lt;- floor(365.25 * yr)\n  d &lt;- floor(30.6001 * (mo + 1))\n\n  # days since J2000.0\n  jd &lt;- b + c + d - 730550.5 + dy + (h + m / 60 + s / 3600) / 24\n  jt &lt;- jd / 36525\n\n  # Rotation\n  mst &lt;- 280.46061837 + 360.98564736629 * jd +\n    0.000387933 * jt^2 - jt^3 / 38710000.0 + lng\n\n  # Modulo 360 degrees\n  mst &lt;- mst %% 360\n\n  return(mst)\n}"
  },
  {
    "objectID": "analysis/functions_celestial_objects.html#spherical-cut",
    "href": "analysis/functions_celestial_objects.html#spherical-cut",
    "title": "Helper Functions for Plotting",
    "section": "Spherical Cut",
    "text": "Spherical Cut\n\n# Cut a sf object with a buffer using spherical s2 geoms\n# Optionally, project and flip\n\nsf_spherical_cut &lt;- function(x, the_buff, the_crs = sf::st_crs(x), flip = NULL) {\n  # Get geometry type\n  geomtype &lt;- unique(gsub(\"MULTI\", \"\", sf::st_geometry_type(x)))[1]\n\n  # Keep the data frame, s2 drops it\n  the_df &lt;- sf::st_drop_geometry(x)\n  the_geom &lt;- sf::st_geometry(x)\n  # Convert to s2 if needed\n  if (!inherits(the_buff, \"s2_geography\")) {\n    the_buff &lt;- sf::st_as_s2(the_buff)\n  }\n\n  the_cut &lt;- the_geom %&gt;%\n    # Cut with s2\n    sf::st_as_s2() %&gt;%\n    s2::s2_intersection(the_buff) %&gt;%\n    # Back to sf and add the df\n    sf::st_as_sfc() %&gt;%\n    sf::st_sf(the_df, geometry = .) %&gt;%\n    dplyr::filter(!sf::st_is_empty(.)) %&gt;%\n    sf::st_transform(crs = the_crs)\n\n  # If it is not POINT filter by valid and non-empty\n  # This if for performance\n  if (!geomtype == \"POINT\") {\n    # If any is GEOMETRYCOLLECTION extract the right value\n    if (any(sf::st_geometry_type(the_cut) == \"GEOMETRYCOLLECTION\")) {\n      the_cut &lt;- the_cut %&gt;%\n        sf::st_collection_extract(type = geomtype, warn = FALSE)\n    }\n\n    the_cut &lt;- the_cut %&gt;%\n      dplyr::filter(!is.na(sf::st_is_valid(.)))\n  }\n\n  if (!is.null(flip)) {\n    the_cut &lt;- the_cut %&gt;%\n      dplyr::mutate(geometry = geometry * flip) %&gt;%\n      sf::st_set_crs(the_crs)\n  }\n\n  return(the_cut)\n}"
  },
  {
    "objectID": "analysis/functions_celestial_objects.html#data-input-transformation-location-time-buffers",
    "href": "analysis/functions_celestial_objects.html#data-input-transformation-location-time-buffers",
    "title": "Helper Functions for Plotting",
    "section": "Data Input & Transformation (Location, Time, Buffers)",
    "text": "Data Input & Transformation (Location, Time, Buffers)\n\nLocation and Time\n\nget_buffered_lat_lon_time &lt;- function(place_, year_, month_, day_, hour_, min_) {\n  # Input place\n  desired_place &lt;- place_    # \"Seoul, Korea\"\n  \n  \n  # Geocode place with nominatimlite\n  desired_place_geo &lt;- geo_lite(desired_place, full_results = TRUE)\n  \n  desired_place_geo_df &lt;- desired_place_geo |&gt;\n    select(address, lat, lon)\n  #&gt; # A tibble: 1 √ó 3\n  #&gt;   address                                                                                    lat   lon\n  #&gt;   &lt;chr&gt;                                                                                    &lt;dbl&gt; &lt;dbl&gt;\n  #&gt; 1 Madrid, √Årea metropolitana de Madrid y Corredor del Henares, Comunidad de Madrid, Espa√±a  40.4 -3.70\n  \n  # And get the coordinates\n  desired_loc &lt;- desired_place_geo %&gt;%\n    select(lat, lon) %&gt;%\n    unlist()\n  \n  # &gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt; time conversion &lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;\n  \n   # Input time\n  desired_date &lt;- make_datetime(\n    year = year_,  # 2023\n    month = month_,  # 12\n    day = day_,     # 1 \n    hour = hour_,   # 12\n    min = min_      # 13\n  )\n  \n  # Get tz\n  get_tz &lt;- tz_lookup_coords(desired_loc[1], desired_loc[2], warn = FALSE)\n  \n  get_tz\n  #&gt; [1] \"Europe/Madrid\"\n  \n  # Force it to be local time\n  desired_date_tz &lt;- force_tz(desired_date, get_tz)\n  \n  desired_date_tz\n  #&gt; [1] \"2015-09-22 03:45:00 CEST\"\n  \n  return (list(desired_loc=desired_loc, desired_date_tz=desired_date_tz))\n  \n}\n\n\n\nBuffers and Projections\n\nget_airy_projection_rotation &lt;- function(desired_date_tz, desired_loc) {\n  \n\n  # Get the rotation and prepare buffer and projection\n  \n  # Get right degrees\n  lon_prj &lt;- get_mst(desired_date_tz, desired_loc[2])\n  lat_prj &lt;- desired_loc[1]\n  \n  # c(lon_prj, lat_prj)\n  #&gt;      lon      lat \n  #&gt; 23.15892 40.41670\n  \n  # Create proj4string w/ Airy projection\n  \n  target_crs &lt;- paste0(\"+proj=airy +x_0=0 +y_0=0 +lon_0=\", lon_prj, \" +lat_0=\", lat_prj)\n  \n  \n  # target_crs\n  #&gt; [1] \"+proj=airy +x_0=0 +y_0=0 +lon_0=23.1589164999314 +lat_0=40.4167047\"\n  \n  # We need to flip celestial objects to get the impression of see from the Earth\n  # to the sky, instead of from the sky to the Earth\n  # https://stackoverflow.com/a/75064359/7877917\n  # Flip matrix for affine transformation\n  \n  flip_matrix &lt;- matrix(c(-1, 0, 0, 1), 2, 2)\n  \n  \n  # And create an s2 buffer of the visible hemisphere at the given location\n  hemisphere_s2 &lt;- s2_buffer_cells(\n    as_s2_geography(\n      paste0(\"POINT(\", lon_prj, \" \", lat_prj, \")\")\n    ),\n    9800000,\n    max_cells = 5000\n  )\n  \n  # This one is for plotting\n  hemisphere_sf &lt;- hemisphere_s2 %&gt;%\n    st_as_sf() %&gt;%\n    st_transform(crs = target_crs) %&gt;%\n    st_make_valid()\n  \n  return (list(target_crs = target_crs, hemisphere_s2 = hemisphere_s2, flip_matrix = flip_matrix))\n  \n}\n\n\n\nGenerate Caption\n\nget_plot_caption &lt;- function(desired_loc, desired_place, desired_date_tz) {\n  \n  lat_lab &lt;- pretty_lonlat(desired_loc[1], type = \"lat\")\n  lon_lab &lt;- pretty_lonlat(desired_loc[2], type = \"lon\")\n\n  pretty_labs &lt;- paste(lat_lab, \"/\", lon_lab)\n  \n  # cat(pretty_labs)\n  #&gt; 40¬∞ 25' 0.14\" N / 3¬∞ 42' 12.9\" W\n  \n  # Create final caption to put on bottom\n  \n  pretty_time &lt;- paste(\n    # Pretty Day\n    scales::label_date(\n      format = \"%d %b %Y\",\n      locale = \"en\"\n    )(desired_date_tz),\n    # Pretty Hour\n    format(desired_date_tz, format = \"%H:%M\", usetz = TRUE)\n  )\n  \n  # cat(pretty_time)\n  #&gt; 22 Sep 2015 03:45 CEST\n  \n  # Our final caption\n  caption &lt;- toupper(paste0(\n    \"Star Map\\n\",\n    desired_place, \"\\n\",\n    pretty_time, \"\\n\",\n    pretty_labs\n  ))\n\n\n  # cat(caption)\n  #&gt; STAR MAP\n  #&gt; MADRID, SPAIN\n  #&gt; 22 SEP 2015 03:45 CEST\n  #&gt; 40¬∞ 25' 0.14\" N / 3¬∞ 42' 12.9\" W\n  \n  return (caption)\n}"
  },
  {
    "objectID": "analysis/functions_celestial_objects.html#create-plots",
    "href": "analysis/functions_celestial_objects.html#create-plots",
    "title": "Helper Functions for Plotting",
    "section": "Create Plots",
    "text": "Create Plots\n\nGraticules\n\n# plotting function to generate graticules for the map\nget_graticules_viz &lt;- function(target_crs, hemisphere_s2) {\n  grat &lt;- st_graticule( \n    # generate graticule, lat goes from east to west celestial pole\n    # lon goes from north to south celestial pole. \n    # each have a decreament, increament value\n    ndiscr = 5000,\n    lat = seq(-90, 90, 10),\n    lon = seq(-180, 180, 30)\n  )\n  \n  # first make a flat graticule using sf\n\n  grat_flat &lt;- ggplot(grat) +\n    geom_sf() +\n    coord_sf(expand = FALSE)\n  \n  # then we make it sphericam using s2 geom\n  # Cut to buffer, we dont flip this one (it is not an object of the space)\n  grat_end &lt;- sf_spherical_cut(\n    x = grat,\n    the_buff = hemisphere_s2,\n    # Change the crs\n    the_crs = target_crs\n  )\n  \n  \n  grat_sf &lt;- ggplot(grat_end) +\n    geom_sf() +\n    coord_sf(expand = FALSE)\n  \n  return (list(grat_flat=grat_flat, grat_sf=grat_sf, grat_end = grat_end))\n}\n\n\n\nStars\n\n# plotting function to generate stars on the map\nget_starts_viz &lt;- function(target_crs, hemisphere_s2, flip_matrix) {\n  \n  stars &lt;- load_celestial(\"stars.6.min.geojson\") #load stars data\n\n  stars_flat &lt;- ggplot(stars) +\n    # We use relative brightness (br) as aes\n    geom_sf(aes(size = br, alpha = br), shape = 16) +\n    scale_size_continuous(range = c(0.5, 6)) +\n    scale_alpha_continuous(range = c(0.1, 0.8)) +\n    coord_sf(expand = FALSE)\n  \n  \n  # Cut to buffer\n  \n  stars_end &lt;- sf_spherical_cut(stars,\n    the_buff = hemisphere_s2,\n    # Change the crs\n    the_crs = target_crs,\n    flip = flip_matrix\n  )\n  \n  stars_sf &lt;- ggplot(stars_end) +\n    # We use relative brightness (br) as aes\n    geom_sf(aes(size = br, alpha = br), shape = 16) +\n    scale_size_continuous(range = c(0.5, 6)) +\n    scale_alpha_continuous(range = c(0.1, 0.8))\n  \n  return (list(stars_flat = stars_flat, stars_sf = stars_sf, stars_end = stars_end))\n\n}\n\n\n\nMilky Way\n\n# plotting function to generate milkyway on the map\nget_milkyway_viz &lt;- function(target_crs, hemisphere_s2, flip_matrix) {\n  \n  mw &lt;- load_celestial(\"mw.min.geojson\") # load the milkyway\n\n  # Add colors to MW to use on fill\n  cols &lt;- colorRampPalette(c(\"white\", \"yellow\"))(5)\n  mw$fill &lt;- factor(cols, levels = cols)\n  \n  mw_flat &lt;- ggplot(mw) +\n    geom_sf(aes(fill = fill)) +\n    scale_fill_identity()\n  \n  \n  # Cut to buffer\n  mw_end &lt;- sf_spherical_cut(mw,\n    the_buff = hemisphere_s2,\n    # Change the crs\n    the_crs = target_crs,\n    flip = flip_matrix\n  )\n  \n  \n  mw_sf &lt;- ggplot(mw_end) +\n    geom_sf(aes(fill = fill)) +\n    scale_fill_identity()\n  \n  return (list(mw_flat = mw_flat, mw_sf = mw_sf, mw_end = mw_end))\n  \n}\n\n\n\nConstellations\n\n# plotting function to generate constellation on the map\nget_constellation_viz &lt;- function(target_crs, hemisphere_s2, flip_matrix) {\n  const &lt;- load_celestial(\"constellations.lines.min.geojson\")\n\n  const_flat &lt;- ggplot(const) +\n    geom_sf() +\n    coord_sf(expand = FALSE)\n  \n  \n  # Cut to buffer\n  \n  const_end &lt;- sf_spherical_cut(const,\n    the_buff = hemisphere_s2,\n    # Change the crs\n    the_crs = target_crs,\n    flip = flip_matrix\n  )\n  \n  \n  const_sf &lt;- ggplot(const_end) +\n  geom_sf() +\n  coord_sf(expand = FALSE)\n  \n  return (list(const_flat = const_flat, const_sf = const_sf, const_end = const_end))\n}\n\n\n\nFinal Plot (Celestial Map)\n\nplot_celestial_map &lt;- function(grat_end, const_end, mw_end, stars_end, target_crs, hemisphere_s2, caption) {\n  \n  # Prepare MULTILINESTRING\n  const_end_lines &lt;- const_end %&gt;%\n    st_cast(\"MULTILINESTRING\") %&gt;%\n    st_coordinates() %&gt;%\n    as.data.frame()\n  \n  # This one is for plotting, we need an sf object that would encapsulate the entire map\n  hemisphere_sf &lt;- hemisphere_s2 %&gt;%\n    st_as_sf() %&gt;%\n    st_transform(crs = target_crs) %&gt;%\n    st_make_valid()\n  \n  \n  celestial_map_plot &lt;- ggplot() +\n    # Graticules\n    geom_sf(data = grat_end, color = \"grey60\", linewidth = 0.25, alpha = 0.3) +\n    # A blurry Milky Way\n    with_blur(\n      geom_sf(\n        data = mw_end, aes(fill = fill), alpha = 0.1, color = NA,\n        show.legend = FALSE\n      ),\n      sigma = 8\n    ) +\n    scale_fill_identity() +\n    # Glowing stars\n    geom_glowpoint(\n      data = stars_end, aes(\n        alpha = br, size =\n          br, geometry = geometry\n      ),\n      color = \"white\", show.legend = FALSE, stat = \"sf_coordinates\"\n    ) +\n    scale_size_continuous(range = c(0.05, 0.75)) +\n    scale_alpha_continuous(range = c(0.1, 0.5)) +\n    # Glowing constellations\n    geom_glowpath(\n      data = const_end_lines, aes(X, Y, group = interaction(L1, L2)),\n      color = \"white\", size = 0.5, alpha =0.8, shadowsize = 0.4, shadowalpha = 0.01,\n      shadowcolor = \"white\", linejoin = \"round\", lineend = \"round\"\n    ) +\n    # Border of the sphere\n    geom_sf(data = hemisphere_sf, fill = NA, color = \"white\", linewidth = 1.25) +\n    # Caption\n    labs(caption = caption) +\n    # And end with theming\n    theme_void() +\n    theme(\n      text = element_text(colour = \"white\"),\n      panel.border = element_blank(),\n      plot.background = element_rect(fill = \"#191d29\", color = \"#191d29\"),\n      plot.margin = margin(20, 20, 20, 20),\n      plot.caption = element_text(\n        hjust = 0.5, face = \"bold\",\n        size = rel(1),\n        lineheight = rel(1.2),\n        margin = margin(t = 40, b = 20)\n      )\n    )\n  \n  return (celestial_map_plot)\n}"
  },
  {
    "objectID": "analysis/functions_celestial_objects.html#testing",
    "href": "analysis/functions_celestial_objects.html#testing",
    "title": "Helper Functions for Plotting",
    "section": "Testing",
    "text": "Testing\n\n# these are the use defined variables\ndesired_place = \"Seoul, Korea\"\nyear_ &lt;- 2023\nmonth_ &lt;- 12\nday_ &lt;- 1\nhour_ &lt;- 12\nmin_ &lt;- 13\n\n# we then transform them to get relevant objects that we pass as parameters for plot functions\n\nlat_lon_time &lt;- get_buffered_lat_lon_time(desired_place, year_, month_, day_, hour_, min_)\nlat_lon_time\n\n$desired_loc\n      lat       lon \n 37.56668 126.97829 \n\n$desired_date_tz\n[1] \"2023-12-01 12:13:00 KST\"\n\ncrs_s2_flip &lt;- get_airy_projection_rotation(lat_lon_time$desired_date_tz, lat_lon_time$desired_loc)\ncrs_s2_flip\n\n$target_crs\n[1] \"+proj=airy +x_0=0 +y_0=0 +lon_0=244.957956941333 +lat_0=37.5666791\"\n\n$hemisphere_s2\n&lt;geodesic s2_geography[1] with CRS=OGC:CRS84&gt;\n[1] POLYGON ((-79.5153773 -44.5176734, -79.3803447 -44.5050982, -79.0192997 -44.4706665, -79.0192997 -44.3586473, -78.9740725 -44.3542514...\n\n$flip_matrix\n     [,1] [,2]\n[1,]   -1    0\n[2,]    0    1\n\n# this one is to get a pretty plot caption\nplot_caption &lt;- get_plot_caption(lat_lon_time$desired_loc, \"Seoul, Korea\", lat_lon_time$desired_date_tz)\n\ncat(plot_caption)\n\nSTAR MAP\nSEOUL, KOREA\n01 DEC 2023 12:13 KST\n37¬∞ 34' 0.04\" N / 126¬∞ 58' 41.85\" E\n\n\nNow below are the individual plots generated from each plotting functions that were previously defined.\n\ngraticules &lt;- get_graticules_viz(crs_s2_flip$target_crs, crs_s2_flip$hemisphere_s2)\n\ngraticules$grat_flat\n\n\n\ngraticules$grat_sf\n\nWarning in CPL_transform(x, crs, aoi, pipeline, reverse, desired_accuracy, :\nGDAL Error 1: PROJ: pipeline: Pipeline: A forward operation couldn't be\nconstructed\n\n\n\n\n\n\nmilkyway &lt;- get_milkyway_viz(crs_s2_flip$target_crs, crs_s2_flip$hemisphere_s2, crs_s2_flip$flip_matrix)\n\nmilkyway$mw_flat\n\n\n\nmilkyway$mw_sf\n\n\n\n\n\nconstellation &lt;- get_constellation_viz(crs_s2_flip$target_crs, \n                                       crs_s2_flip$hemisphere_s2, crs_s2_flip$flip_matrix)\n\nconstellation$const_flat\n\n\n\nconstellation$const_sf\n\n\n\n\n\nstars &lt;- get_starts_viz(crs_s2_flip$target_crs, crs_s2_flip$hemisphere_s2, crs_s2_flip$flip_matrix)\n\nstars$stars_flat\n\n\n\nstars$stars_sf\n\n\n\n\nThe above plots are encapsuated in a main plotting function, with colors and intensity defined. Later, these colors will also become user defined.\n\nplot_celestial_map(grat_end = graticules$grat_end, \n                   const_end = constellation$const_end, \n                   mw_end = milkyway$mw_end, \n                   stars_end = stars$stars_end,\n                   target_crs = crs_s2_flip$target_crs,\n                   hemisphere_s2 = crs_s2_flip$hemisphere_s2, \n                   caption = plot_caption)"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "üå† Constellation Maps",
    "section": "",
    "text": "This project aims to develop a Shiny app that generates an interactive constellation maps, leveraging computational and visualization techniques. Utilizing the datasets are available in GeoJSON (*.geojson) and GeoPackage (*.gpkg) formats, we will be using three of the available data: the milkyway, the constellation lines, and the stars. The primary objective is to prioritize accessibility and personalization by allowing users to input specific geographic locations and time, resulting in contextually relevant and visually captivating constellation maps. The significance of this project is to enhance the appeal and educational value of stargazing by tailoring the experience through diverse elements such as color schemes, map locations, time zones, and latitude/longitude inputs. Furthermore, the app will be crafted with a user-friendly interface, aiming for inclusivity across diverse backgrounds and levels of astronomical expertise."
  },
  {
    "objectID": "index.html#abstract",
    "href": "index.html#abstract",
    "title": "üå† Constellation Maps",
    "section": "",
    "text": "This project aims to develop a Shiny app that generates an interactive constellation maps, leveraging computational and visualization techniques. Utilizing the datasets are available in GeoJSON (*.geojson) and GeoPackage (*.gpkg) formats, we will be using three of the available data: the milkyway, the constellation lines, and the stars. The primary objective is to prioritize accessibility and personalization by allowing users to input specific geographic locations and time, resulting in contextually relevant and visually captivating constellation maps. The significance of this project is to enhance the appeal and educational value of stargazing by tailoring the experience through diverse elements such as color schemes, map locations, time zones, and latitude/longitude inputs. Furthermore, the app will be crafted with a user-friendly interface, aiming for inclusivity across diverse backgrounds and levels of astronomical expertise."
  },
  {
    "objectID": "index.html#introduction",
    "href": "index.html#introduction",
    "title": "üå† Constellation Maps",
    "section": "Introduction",
    "text": "Introduction\nEveryone has had the experience of wanting to know the name of the constellation currently visible in the sky. At least once, we‚Äôve all heard the myths and stories of how constellations were named when we were young. Also, we might want to explore the sky in places or time zones where we have not experienced before.\nSo, how can we observe the skies in different places and time zones? That is the main focus of this project. By utilizing geospatial data, celestial information, and a bit of astronomical knowledge, we can traverse space-time and behold the beauty of various constellations.\nThe datasets are from @dieghernan and consist of 63 files, including GeoJSON, GeoPackage, and CSV formats. You can These files are categorized into the Milky Way, the constellation lines, and the stars. Each file is intricately implemented, providing the framework for the sky map, coordinates, the Milky Way, constellations, and stars.\nWith these data files, we created a sky map and published an interactive Shiny app, allowing users to input city, time, and accessible color preferences."
  },
  {
    "objectID": "index.html#approach",
    "href": "index.html#approach",
    "title": "üå† Constellation Maps",
    "section": "Approach",
    "text": "Approach\n\nHelp functions\nTo create a visualization of the sky map, there are various preparations to be made. Initially, we established several helper functions to implement the sky map based on locations and time zones. The load_celestial() function loads the entire dataset essential for our needs, while pretty_lonlat() is responsible for converting coordinates into a specific format. Also, get_mst() computes the Mean Sidereal Time (MST) given a specific longitude. And sf_spherical_cut() cuts map into spherical.\n\n\nInputs\nThe input places and time zones are converted from natural language to coordinates, enabling mapping on the sky map. It operates in the Shiny app in a similar manner.\n\n\nCelestial bodies\nAnd then, we incorporate each celestial body, including the Milky Way, constellations, and stars, whose information is stored in each GeoJSON dataset. We project each celestial body into a hemisphere by using the sf_spherical_cut function. When we finally add graticules into the hemisphere, we‚Äôre all set to visualize the sky map!\n\n\nGraticules\n\n\n\n\n\n\n\nMilky way\n\n\n\n\n\n\n\nStars\n\n\n\n\n\n\n\nConstellations\n\n\n\n\n\n\n\nApply the work into Shiny app\nWe utilized the same inputs (place, time zone) in the Shiny app. Additionally, we incorporated a checkbox for displaying the names of constellations and components that enable users to choose the color of the map. Finally we enabled users to download their sky map with their specified places and time zones"
  },
  {
    "objectID": "index.html#results",
    "href": "index.html#results",
    "title": "üå† Constellation Maps",
    "section": "Results",
    "text": "Results\nWe plotted all the functions together, and customized the background color, the glow intensity of the constellations, and provided a pretty caption at the footer\n\n#| code-fold: true\n#| code-summary: \"Plot Function for Star Map\"\n\nggplot() +\n    # Graticules\n    geom_sf(data = grat_end, color = \"grey60\", linewidth = 0.25, alpha = 0.3) +\n    # A blurry Milky Way\n    with_blur(\n      geom_sf(\n        data = mw_end, aes(fill = fill), alpha = 0.1, color = NA,\n        show.legend = FALSE\n      ),\n      sigma = 8\n    ) +\n    scale_fill_identity() +\n    # Glowing stars\n    geom_glowpoint(\n      data = stars_end, aes(\n        alpha = br, size =\n          br, geometry = geometry\n      ),\n      color = \"white\", show.legend = FALSE, stat = \"sf_coordinates\"\n    ) +\n    scale_size_continuous(range = c(0.05, 0.75)) +\n    scale_alpha_continuous(range = c(0.1, 0.5)) +\n    # Glowing constellations\n    geom_glowpath(\n      data = const_end_lines, aes(X, Y, group = interaction(L1, L2)),\n      color = \"white\", size = 0.5, alpha =0.8, shadowsize = 0.4, shadowalpha = 0.01,\n      shadowcolor = \"white\", linejoin = \"round\", lineend = \"round\"\n    ) +\n    # Border of the sphere\n    geom_sf(data = hemisphere_sf, fill = NA, color = \"white\", linewidth = 1.25) +\n    # Caption\n    labs(caption = caption) +\n    # And end with theming\n    theme_void() +\n    theme(\n      text = element_text(colour = \"white\"),\n      panel.border = element_blank(),\n      plot.background = element_rect(fill = \"#191d29\", color = \"#191d29\"),\n      plot.margin = margin(20, 20, 20, 20),\n      plot.caption = element_text(\n        hjust = 0.5, face = \"bold\",\n        size = rel(1),\n        lineheight = rel(1.2),\n        margin = margin(t = 40, b = 20)\n      )\n    )\n\n\n\n\n\n\nThe shiny app is deployed here: https://bag6d9-visalakshi-iyer.shinyapps.io/starmapapp/"
  },
  {
    "objectID": "index.html#conclusion",
    "href": "index.html#conclusion",
    "title": "üå† Constellation Maps",
    "section": "Conclusion",
    "text": "Conclusion\nConstellations, as fundamental guides in locating stars, galaxies, and celestial bodies, play a crucial role in astronomical observation and research. Although telescopes are the main tool to naturally observe constellations, most of the public does not have access to this tool (Hintz et al., 2015). Alternatively, datasets have allowed us the ability to develop a Shiny app that visualizes constellations by offering a personalized and interactive experience. Through user-inputted geographic locations, the app not only facilitates stargazing engagement but also contributes to the broader educational curiosity of understanding the stars. This personalized approach not only benefits seasoned astronomers but also serves as an educational tool, engaging learners of all ages in the study of astronomy. However, it‚Äôs important to acknowledge the limitations of the current Shiny Constellation Map app, including the lack of detailed information about constellations and the potential complexity that may arise from feature-rich interfaces. Additionally, the reliance on incomplete or inaccurate data could pose challenges, leading to misidentifications. Despite these limitations, the Shiny app represents a significant step toward making an constellation app accessible, engaging, and educational for a diverse audience."
  },
  {
    "objectID": "index.html#citations",
    "href": "index.html#citations",
    "title": "üå† Constellation Maps",
    "section": "Citations",
    "text": "Citations\nHintz et al., 2015: https://files.eric.ed.gov/fulltext/EJ1101067.pdf\nImages: Unsplash Photos\nFrohn, O., & Hernang√≥mez, D. (2023). Celestial Data [Data set].¬†https://doi.org/10.5281/zenodo.7561601"
  },
  {
    "objectID": "presentation.html",
    "href": "presentation.html",
    "title": "Constellation Maps",
    "section": "",
    "text": "Develop a Shiny app that generates constellation maps that utilizes interactive elements, incorporating computational and visualization techniques.\n\n\n\n\n\n\n\n\n\nIncreasing engagement by personalizing the experience through various elements: color usage, map location, time zone, latitude/longitude location\nDesigning with a user-friendly interface to ensure accessibility for people of all backgrounds and levels of astronomical knowledge\nProviding annotations to provide readability and educational context for a wide range of users, including astronomy beginners\n\n\n\n\n\nThis dataset is a processed version of d3-celestial-plugin, an official GeoJSON library for obtaining spatial data on constellation objects.\nThe datasets are available in GeoJSON (*.geojson) and GeoPackage (*.gpkg) formats\nRepresentation of these celestial objects‚Äô positions are according to the J2000 epoch. Which means that it is as of the Julian epoch that started on January 1, 2000, at 12:00 Terrestrial Time.\nData used:\n\nmw = Milky Way dataset\nconstellations.lines = Constellation Lines dataset\nstars.8 = Stars dataset"
  },
  {
    "objectID": "presentation.html#high-level-goal",
    "href": "presentation.html#high-level-goal",
    "title": "Constellation Maps",
    "section": "",
    "text": "Develop a Shiny app that generates constellation maps that utilizes interactive elements, incorporating computational and visualization techniques."
  },
  {
    "objectID": "presentation.html#goals-motivations",
    "href": "presentation.html#goals-motivations",
    "title": "Constellation Maps",
    "section": "",
    "text": "Increasing engagement by personalizing the experience through various elements: color usage, map location, time zone, latitude/longitude location\nDesigning with a user-friendly interface to ensure accessibility for people of all backgrounds and levels of astronomical knowledge\nProviding annotations to provide readability and educational context for a wide range of users, including astronomy beginners"
  },
  {
    "objectID": "presentation.html#dataset",
    "href": "presentation.html#dataset",
    "title": "Constellation Maps",
    "section": "",
    "text": "This dataset is a processed version of d3-celestial-plugin, an official GeoJSON library for obtaining spatial data on constellation objects.\nThe datasets are available in GeoJSON (*.geojson) and GeoPackage (*.gpkg) formats\nRepresentation of these celestial objects‚Äô positions are according to the J2000 epoch. Which means that it is as of the Julian epoch that started on January 1, 2000, at 12:00 Terrestrial Time.\nData used:\n\nmw = Milky Way dataset\nconstellations.lines = Constellation Lines dataset\nstars.8 = Stars dataset"
  },
  {
    "objectID": "presentation.html#analysis-approach",
    "href": "presentation.html#analysis-approach",
    "title": "Constellation Maps",
    "section": "Analysis Approach",
    "text": "Analysis Approach\n\nDevelop a Shiny app for personalized constellation maps with user input\nEnhance user engagement in stargazing from various locations time zones and even user bases\nPrioritize accessibility through a user-friendly interface and colorblind-friendly design\nProvide contextual annotations for users with different levels of astronomical knowledge"
  },
  {
    "objectID": "presentation.html#conclusion",
    "href": "presentation.html#conclusion",
    "title": "Constellation Maps",
    "section": "Conclusion",
    "text": "Conclusion\n\nConstellations aid in locating stars, galaxies, and other celestial bodies, offering reference points for astronomical observation and research.\nObservations of constellations contribute to scientific discoveries, aiding in the understanding of star formation, stellar evolution, and the dynamics of galaxies.\nConstellations serve as educational tools, engaging learners of all ages in the study of astronomy and offer an accessible entry point for teaching basic astronomical concepts."
  },
  {
    "objectID": "presentation.html#limitations",
    "href": "presentation.html#limitations",
    "title": "Constellation Maps",
    "section": "Limitations",
    "text": "Limitations\n\nSome starmap apps can become complex due to the abundance use of features, making the interface crowded, confusing the new users.\nSometimes due to incomplete or inaccurate data, might lead to misidentification of celestial objects or missing information about certain stars or constellations. The dataset is currently actively updated, but with the passing of time, the requirement for different processed dataset can arise."
  },
  {
    "objectID": "presentation.html#helper-functions",
    "href": "presentation.html#helper-functions",
    "title": "Constellation Maps",
    "section": "Helper Functions",
    "text": "Helper Functions\n\nWe first started by exploring the dataset objects and creating transformation functions for the data.\nFor getting the celestial map of any geolocation, there were two requirements.\n\n\n\n\nFirst to get the time zone mapped to the local time zone of the desired place. This was done by getting projections through the get_mst() function where we convert the time and then derive the rotation of the objects in the dataset with the given date and time\n\n\n\nSecond, using the derived projections, we needed to map the objects in a spherical geom. This was done using the sf package."
  },
  {
    "objectID": "presentation.html#plotting-functions",
    "href": "presentation.html#plotting-functions",
    "title": "Constellation Maps",
    "section": "Plotting Functions",
    "text": "Plotting Functions\n\nEvery dataset for this project (milkyway, stars, constellations) contained sf (simple features) object that can be used directly to plot polygons on a spherical geom (s2). Here is a glimpse of one such dataset:\n\n\n\nSimple feature collection with 5 features and 1 field\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: -179.987 ymin: -74.9 xmax: 180 ymax: 66.946\nGeodetic CRS:  WGS 84\n   id                       geometry\n1 ol1 MULTIPOLYGON (((178.558 -74...\n2 ol2 MULTIPOLYGON (((-176.662 -6...\n3 ol3 MULTIPOLYGON (((-174.067 -6...\n4 ol4 MULTIPOLYGON (((-158.721 -6...\n5 ol5 MULTIPOLYGON (((161.333 -59..."
  },
  {
    "objectID": "presentation.html#plotting-functions-1",
    "href": "presentation.html#plotting-functions-1",
    "title": "Constellation Maps",
    "section": "Plotting Functions",
    "text": "Plotting Functions\n\nUsing the three datasets, we we able to create location based spherical maps for any given time. The plots are shown below\n\n\nGraticulesMilkyWayStarsConstellations"
  },
  {
    "objectID": "presentation.html#knitting-them-together",
    "href": "presentation.html#knitting-them-together",
    "title": "Constellation Maps",
    "section": "Knitting them together",
    "text": "Knitting them together\n\n\n\nWe plotted all the functions together, and customized the background color, the glow intensity of the constellations, and provided a pretty caption at the footer\n\n\n#| code-fold: true\n#| code-summary: \"Plot Function for Star Map\"\n\nggplot() +\n    # Graticules\n    geom_sf(data = grat_end, color = \"grey60\", linewidth = 0.25, alpha = 0.3) +\n    # A blurry Milky Way\n    with_blur(\n      geom_sf(\n        data = mw_end, aes(fill = fill), alpha = 0.1, color = NA,\n        show.legend = FALSE\n      ),\n      sigma = 8\n    ) +\n    scale_fill_identity() +\n    # Glowing stars\n    geom_glowpoint(\n      data = stars_end, aes(\n        alpha = br, size =\n          br, geometry = geometry\n      ),\n      color = \"white\", show.legend = FALSE, stat = \"sf_coordinates\"\n    ) +\n    scale_size_continuous(range = c(0.05, 0.75)) +\n    scale_alpha_continuous(range = c(0.1, 0.5)) +\n    # Glowing constellations\n    geom_glowpath(\n      data = const_end_lines, aes(X, Y, group = interaction(L1, L2)),\n      color = \"white\", size = 0.5, alpha =0.8, shadowsize = 0.4, shadowalpha = 0.01,\n      shadowcolor = \"white\", linejoin = \"round\", lineend = \"round\"\n    ) +\n    # Border of the sphere\n    geom_sf(data = hemisphere_sf, fill = NA, color = \"white\", linewidth = 1.25) +\n    # Caption\n    labs(caption = caption) +\n    # And end with theming\n    theme_void() +\n    theme(\n      text = element_text(colour = \"white\"),\n      panel.border = element_blank(),\n      plot.background = element_rect(fill = \"#191d29\", color = \"#191d29\"),\n      plot.margin = margin(20, 20, 20, 20),\n      plot.caption = element_text(\n        hjust = 0.5, face = \"bold\",\n        size = rel(1),\n        lineheight = rel(1.2),\n        margin = margin(t = 40, b = 20)\n      )\n    )"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "This project was developed by the Chart Champions For INFO 526 - Data Analysis & Visualization at the University of Arizona, taught by Dr.¬†Greg Chism. The team is comprised of the following team members.\n\nMegan Hokama: Third-year Ph.D.¬†student in Educational Psychology at University of Arizona.\nSai Madhuri Kandula: First-year graduate student pursuing Data Science at University of Arizona.\nVisalakshi Prakash Iyer: First-year graduate student pursuing Data Science at University of Arizona.\nKiwoon Hong : First-year graduate student pursuing Data Science at University of Arizona.\nTejashwini Kasa: First-year graduate student pursuing Data Science at University of Arizona."
  },
  {
    "objectID": "presentation.html#thank-you-for-listening-any-questions",
    "href": "presentation.html#thank-you-for-listening-any-questions",
    "title": "Constellation Maps",
    "section": "Thank you for listening! Any questions?",
    "text": "Thank you for listening! Any questions?\n\n\n\nCredit: BBC"
  },
  {
    "objectID": "presentation.html#demo",
    "href": "presentation.html#demo",
    "title": "Constellation Maps",
    "section": "Demo",
    "text": "Demo\nNow, we are going to demonstrate our project in action.\nShiny App for Celestial Map"
  }
]